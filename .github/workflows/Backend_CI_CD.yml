name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && 'production' || 'development' }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nerdwork_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Install dependencies
        run: |
          rm -rf node_modules
          npm ci --frozen-lockfile || npm install --frozen-lockfile

      - name: Lint code
        run: npm run lint || echo "No linting configured"

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./dist
          retention-days: 1

  deploy-lambda-functions:
    name: Deploy Lambda Functions
    needs: [backend-ci]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && 'production' || 'development' }}

    strategy:
      matrix:
        service: [
          'auth',
          'comic',
          'chapter',
          'file',
          'library',
          'nft',
          'payment',
          'profile',
          'transaction',
          'wallet',
          'helio-webhooks'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Setup and build service
        working-directory: lambda/${{ matrix.service }}
        run: |
          echo "=== Setting up service: ${{ matrix.service }} ==="
          echo "Current directory: $(pwd)"
          echo "Files in service directory:"
          ls -la
          
          # Create source directory and copy files
          echo "\n=== Copying source code ==="
          mkdir -p src
          cp -r ../../src/* ./src/ 2>/dev/null || {
            echo "Warning: Some source files may not have been copied"
            echo "Available source directories:"
            find ../../src -maxdepth 2 -type d | head -10
          }
          
          # Verify critical directories exist
          echo "\n=== Verifying source structure ==="
          [ -d "./src/routes" ] && echo "✅ Routes directory found" || echo "❌ Routes directory missing"
          [ -d "./src/controller" ] && echo "✅ Controller directory found" || echo "❌ Controller directory missing"
          [ -d "./src/config" ] && echo "✅ Config directory found" || echo "❌ Config directory missing"
          
          # Install dependencies
          echo "\n=== Installing dependencies ==="
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci"
            npm ci --legacy-peer-deps
          else
            echo "No package-lock.json found, using npm install"
            npm install --legacy-peer-deps
          fi
          
          # Build the service  
          echo "\n=== Building service ==="
          npm run build

      - name: Deploy to AWS Lambda
        working-directory: lambda/${{ matrix.service }}
        run: |
          echo "=== Deploying service: ${{ matrix.service }} ==="
          STAGE="${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
          echo "Deploying to stage: $STAGE"
          serverless deploy --stage $STAGE --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Notify failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Backend Deployment Failed - ${{ matrix.service }}`,
                body: `Deployment failed for service: ${{ matrix.service }}\n\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nWorkflow: ${context.workflow}\nRef: ${context.ref}`
              });
              console.log('Issue created successfully');
            } catch (error) {
              console.log('Failed to create issue:', error.message);
            }
