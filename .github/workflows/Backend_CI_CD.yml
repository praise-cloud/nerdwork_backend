name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nerdwork_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint || echo "No linting configured"

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:FohTDLGJpGUxRFBKRVoYmVOYlAyhmZDL@turntable.proxy.rlwy.net:17037/railway
          JWT_SECRET: cmusencwyenumieu8w7634378urnscudysuyiudimcjwugrftyuyzdiunch
          NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ./dist
          retention-days: 1

  deploy-lambda-functions:
    name: Deploy Lambda Functions
    needs: [backend-ci]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [
          'auth',
          'comic',
          'chapter',
          'file',
          'library',
          'nft',
          'payment',
          'profile',
          'transaction',
          'wallet',
          'helio-webhooks'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./dist

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install service dependencies
        run: |
          mkdir -p ./lambda-packages/${{ matrix.service }}
          cp -r ./dist/* ./lambda-packages/${{ matrix.service }}/
          cp package.json ./lambda-packages/${{ matrix.service }}/
          cd ./lambda-packages/${{ matrix.service }}
          npm ci --production

      - name: Create service-specific handler
        run: |
          cat > ./lambda-packages/${{ matrix.service }}/handler.js << EOL
          const serverless = require('serverless-http');
          const { app } = require('./dist/server');

          // Filter routes for this service only
          const serviceRoutes = app._router.stack.filter(layer => {
            if (layer.route) {
              return layer.route.path.includes('/${{ matrix.service }}') ||
                     layer.route.path.includes('/${{ matrix.service }}/');
            }
            return false;
          });

          // Create a new router with only this service's routes
          const serviceApp = require('express')();
          serviceApp._router.stack = serviceRoutes;

          module.exports.handler = serverless(serviceApp);
          EOL

      - name: Create serverless.yml
        run: |
          cat > ./lambda-packages/${{ matrix.service }}/serverless.yml << EOL
          service: nerdwork-${{ matrix.service }}

          provider:
            name: aws
            runtime: nodejs20.x
            stage: \${opt:stage, 'dev'}
            region: \${opt:region, 'us-east-1'}
            environment:
              NODE_ENV: \${opt:stage, 'dev'}
              DATABASE_URL: \${ssm:/nerdwork/\${self:provider.stage}/database-url}
              JWT_SECRET: \${ssm:/nerdwork/\${self:provider.stage}/jwt-secret}

          functions:
            api:
              handler: handler.handler
              events:
                - httpApi:
                    path: /${{ matrix.service }}
                    method: any
                - httpApi:
                    path: /${{ matrix.service }}/{proxy+}
                    method: any

          plugins:
            - serverless-offline
          EOL

      - name: Deploy to AWS Lambda
        run: |
          cd ./lambda-packages/${{ matrix.service }}
          STAGE="${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && 'prod' || 'dev' }}"
          serverless deploy --stage $STAGE
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}