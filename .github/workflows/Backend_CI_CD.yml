name: Backend CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    strategy:
      fail-fast: false
      matrix:
        service: [
          'auth',
          'comic',
          'chapter',
          'file',
          'library',
          'nft',
          'payment',
          'profile',
          'transaction',
          'wallet',
          'helio-webhooks'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Build root project
        run: |
          echo "=== Building root project ==="
          npm ci --frozen-lockfile || npm install
          npm run build

      - name: Build lambda handler
        run: |
          echo "=== Building handler for ${{ matrix.service }} ==="
          if [ -f "lambda/${{ matrix.service }}/handler.ts" ]; then
            npx tsc lambda/${{ matrix.service }}/handler.ts \
              --outDir lambda/${{ matrix.service }}/dist \
              --module commonjs \
              --target es2020 \
              --esModuleInterop \
              --skipLibCheck \
              --allowSyntheticDefaultImports \
              --resolveJsonModule
            echo "✅ Handler compiled"
          else
            echo "❌ Handler not found at lambda/${{ matrix.service }}/handler.ts"
            exit 1
          fi

      - name: Copy shared dist to service
        run: |
          echo "=== Copying shared dist files to ${{ matrix.service }} ==="
          mkdir -p lambda/${{ matrix.service }}/dist
          cp -r ./dist/* lambda/${{ matrix.service }}/dist/ || echo "No shared dist files"

      - name: Install service dependencies
        working-directory: lambda/${{ matrix.service }}
        run: |
          echo "=== Installing dependencies for ${{ matrix.service }} ==="
          if [ -f "package.json" ]; then
            rm -f package-lock.json
            npm install --legacy-peer-deps
          fi

      - name: Deploy to AWS Lambda
        working-directory: lambda/${{ matrix.service }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          echo "=== Deploying ${{ matrix.service }} to AWS Lambda ==="
          echo "Region: $AWS_REGION"
          echo "Credentials loaded: $([ -n "$AWS_ACCESS_KEY_ID" ] && echo 'YES' || echo 'NO')"
          npx serverless deploy --stage prod --verbose

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed for ${{ matrix.service }}"
          echo "Check the logs above for details"