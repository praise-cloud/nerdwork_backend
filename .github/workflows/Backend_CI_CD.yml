name: Backend CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nerdwork_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './package-lock.json'

      - name: Install dependencies
        run: |
          rm -rf node_modules
          npm ci --frozen-lockfile || npm install --frozen-lockfile

      - name: Lint code
        run: npm run lint || echo "No linting configured"

      - name: Run tests
        run: npm test || echo "No tests configured"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nerdwork_test
          NODE_ENV: test

      - name: Build application
        run: npm run build

      - name: Build lambda handlers
        run: |
          echo "=== Building lambda handlers ==="
          for service in auth comic chapter file library nft payment profile transaction wallet helio-webhooks; do
            if [ -f "lambda/$service/handler.ts" ]; then
              echo "Building handler for $service"
              npx tsc lambda/$service/handler.ts --outDir lambda/$service/dist --module commonjs --target es2020 --esModuleInterop --skipLibCheck --allowSyntheticDefaultImports --resolveJsonModule
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            ./dist
            ./lambda/*/dist/handler.js
          retention-days: 1

  deploy-lambda-functions:
    name: Deploy Lambda Functions
    needs: [backend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production

    strategy:
      fail-fast: false
      matrix:
        service: [
          'auth',
          'comic',
          'chapter',
          'file',
          'library',
          'nft',
          'payment',
          'profile',
          'transaction',
          'wallet',
          'helio-webhooks'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./

      - name: Install Serverless Framework
        run: npm install --no-save serverless@3

      - name: Setup service for deployment
        working-directory: lambda/${{ matrix.service }}
        run: |
          echo "=== Setting up service: ${{ matrix.service }} ==="
          echo "Current directory: $(pwd)"
          echo "Files in service directory:"
          ls -la

          # Verify handler was built
          echo ""
          echo "=== Verifying pre-built handler ==="
          if [ -f "dist/handler.js" ]; then
            echo "✅ Handler found at dist/handler.js"
          else
            echo "❌ Handler not found! Deployment will fail."
            exit 1
          fi

          # Verify shared dist files exist
          echo ""
          echo "=== Verifying shared build artifacts ==="
          if [ -d "../../dist" ]; then
            echo "✅ Shared dist directory found"
            echo "Sample contents:"
            find ../../dist -maxdepth 2 -type f | head -5
          else
            echo "⚠️  Warning: Shared dist directory not found"
          fi

          # Install production dependencies only
          echo ""
          echo "=== Installing production dependencies ==="
          if [ -f "package-lock.json" ]; then
            echo "Found package-lock.json, using npm ci"
            npm ci --omit=dev --legacy-peer-deps --no-audit --no-fund
          elif [ -f "package.json" ]; then
            echo "Found package.json, using npm install"
            npm install --omit=dev --legacy-peer-deps --no-audit --no-fund
          else
            echo "No package.json found, skipping dependency installation"
          fi

          # Final verification
          echo ""
          echo "=== Final deployment verification ==="
          echo "Contents of dist directory:"
          ls -la dist/ 2>/dev/null || echo "No dist directory"
          echo ""
          echo "Service ready for deployment ✅"

      - name: Deploy to AWS Lambda
        working-directory: lambda/${{ matrix.service }}
        run: |
          echo "=== Deploying service: ${{ matrix.service }} ==="
          STAGE="prod"
          echo "Deploying to stage: $STAGE"
          npx serverless deploy --stage $STAGE --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

      - name: Notify failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Backend Deployment Failed - ${{ matrix.service }}`,
                body: `## Deployment Failure Report\n\n**Service:** ${{ matrix.service }}\n**Stage:** prod\n**Triggered by:** ${context.actor}\n\n**Logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n**Workflow:** ${context.workflow}\n**Branch:** ${context.ref}\n**Commit:** ${context.sha.substring(0, 7)}\n\n---\n*This issue was automatically created by the CI/CD pipeline*`,
                labels: ['deployment-failure', 'backend', '${{ matrix.service }}']
              });
              console.log('Issue created successfully');
            } catch (error) {
              console.log('Failed to create issue:', error.message);
            }